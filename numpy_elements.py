# -*- coding: utf-8 -*-
"""Numpy_elements.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a16eXtnbxFhH5byDG1HOOkcMyrrU3Q3d

###NumPy
"""

#1. Create a NumPy array with values from 10 to 49 (inclusive).
# Reshape it into a 4x10 matrix.

import numpy as np
arr = np.array(range(10, 50))
arr=np.reshape(arr,(4,10))
arr

# Then extract the last column from the reshaped matrix
print(arr[0:,9:])

#2. Create two 3×3 matrices:
# One filled with all 5s , One with values from 1 to 9
#  Then find the transpose of the result
frst=np.full((3,3),5)
print(frst)
scnd=np.array(range(1,10)).reshape(3,3)
print(scnd)



#  Add the two matrices
sum=np.add(frst,scnd)
sum

#  Multiply them element-wise
product=np.multiply(frst,scnd)
product

#  Then find the transpose of the result
trps=np.transpose(product)
# trps=product.T
trps

# 3. Create a NumPy array of 15 random integers between 10 and 100.
rand=np.random.randint(10,101,15)
print(rand)

# ● Replace all values greater than 50 with -1
rand[rand > 50]=-1
rand

# ● Count how many values were replaced.
count=np.sum(rand==-1)
print(count)

# 4. Generate a 5×4 array with random values between 0 and 1 (float).
flt=np.random.rand(5,4)
flt

#  Find the row with the maximum sum of values.
rwsm=np.sum(flt,axis=1)
max_raw=np.argmax(rwsm)
mxrw=flt[max_raw]
mxrw

#  Normalize each row using the formula:
min= flt.min(axis=1)
max=flt.max(axis=1)
min = min.reshape(-1, 1)
max = max.reshape(-1, 1)
normalized = (flt - min) / (max - min)
normalized

# 5. arrr = np.array([1, 3, 5, 3, 7, 9, 1, 5, 5])
#  Find all unique elements
arrr = np.array([1, 3, 5, 3, 7, 9, 1, 5, 5])
print(np.unique(arrr))

#  Find the duplicates (elements that appear more than once)
unique_elements,counts=np.unique(arrr, return_counts=True)
duplicates=unique_elements[counts>1]
print(duplicates)

# 6. Create a 6×6 NumPy array with values from 1 to 36.
arr=np.array(range(1,37))
arr=np.reshape(arr,(6,6))
arr

# ● Extract the middle 4×4 submatrix.
submatrix=arr[1:5,1:5]
print(submatrix)

# ● Then extract all even numbers from this submatrix.
even=submatrix[submatrix%2==0]
print(even)

# 7. Generate an array of shape (3, 4) with values from 0 to 11.
arr = np.arange(12).reshape(3, 4)
arr

# ● Reshape it to (2, 6)
reshaped_arr = arr.reshape(2, 6)
reshaped_arr

# ● Then flatten it into a 1D array
flattened = reshaped_arr.flatten()   # makes a copy
# or
flattened = reshaped_arr.ravel()     # returns a view (faster if no copy needed)
# or
flattened = reshaped_arr.reshape(-1)
flattened

# ● Convert the 1D array back to shape (4, 3)
print(flattened.reshape(4,3))



# 8 . Create an array: a = np.array([[1, 2], [3, 4]])
a = np.array([[1, 2], [3, 4]])
a

# ● Append a new row [5, 6]
result = np.append(a, [[5, 6]], axis=0)
result

# ● Then append a new column [7, 8, 9]
new_column=np.array([ 7,8, 9])
new_column=np.reshape(new_column,(-1,1))
result2=np.append(result,new_column, axis=1)
print(result2)

# 9.
a = np.array([1, 2, 3])
b = np.array([4, 5, 6])
c = np.array([7, 8, 9])
# ● Join them into a single array
joined_array=np.concatenate((a,b,c))
print(joined_array)

# ● Reshape the result into a 3×3 matrix
b=joined_array.reshape(3,3)
b

# ● Extract the diagonal elements
diagonal=np.diag(b)
diagonal

# 10. Create a NumPy array of integers from 1 to 20.
arr = np.arange(1, 21)
arr

# ● Extract all values that are divisible by 3 or 5.
div3_4=arr[(arr%3==0) | (arr%5==0)]
div3_4

# ● Count how many such values exist.
# count= len(div3_4)
count = div3_4.size
count

"""###PANDAS"""

# 1. Load the Titanic dataset and display the first 10 rows.
import seaborn as sns
import pandas as pd
df = sns.load_dataset('titanic')
print(df.head(10))

# Find the number of missing values in each column.
df.isna().sum()

# 3. Find the percentage of passengers who survived, grouped by gender.
survival_percentage = df.groupby('sex')['survived'].mean() * 100
print(survival_percentage)

# 4. Find the average, median, and standard deviation of passenger ages.
ages = df['age'].dropna()


average_age = ages.mean()
median_age = ages.median()
std_dev_age = ages.std()
print("Average ",average_age)
print("Median ",median_age)
print("Standard Deviation ",std_dev_age)

# 5. Count how many passengers were in each class (pclass).
count=df['pclass'].count()
print(count)

# 6. Show all passengers who were female, under age 18, and survived.
list = df[(df['sex'] == 'female') & (df['age'] < 18) & (df['survived'] == 1)]
list

# 7. Replace missing age values with the median age.
median_age = df['age'].median()

data=df['age'] = df['age'].fillna(median_age)
print(data)

# 8. Create a column age_group with values:
# a. 'Child' for age < 18
df['age'] = df['age'].fillna(df['age'].median())

d=df['age_group'] = df['age'].apply(lambda x: 'Child')
print(d)

# b. 'Adult' for age 18–60
df['age'] = df['age'].fillna(df['age'].median())

# Define age_group column: Child (<18), Adult (18–60)
b=df['age_group'] = df['age'].apply(lambda x: 'Child' if x < 18 else 'Adult' if x <= 60 else 'Senior')
b

# c. 'Senior' for age > 60
df['age'] = df['age'].fillna(df['age'].median())

# Assign age groups
c=df['age_group'] = df['age'].apply(lambda x: 'Child' if x < 18 else 'Adult' if x <= 60 else 'Senior')
c

# 9.  Display the top 5 passengers who paid the highest fare.
top = df.sort_values(by='fare', ascending=False).head(5)
top

# 10. Find the average fare paid, grouped by both pclass and sex.
avg_fare = df.groupby(['pclass', 'sex'])['fare'].mean().round(2)
print(avg_fare)

# 11. Rename the following columns:
# a. 'sex' → 'gender'
df = df.rename(columns={'sex': 'gender'})
df

# b. 'fare' → 'ticket_fare'
df = df.rename(columns={
 'fare': 'ticket_fare'
})
df

# 12. Count the number of passengers who survived and didn’t survive, grouped by class.
survival_counts = df.groupby(['pclass', 'survived']).size().unstack(fill_value=0)
# Rename columns for clarity (optional)
survival_counts.columns = ['Not Survived', 'Survived']
print(survival_counts)

# 13. Find the average age of passengers grouped by both class and gender.
avg_age = df.groupby(['pclass', 'gender'])['age'].mean().round(2)
print(avg_age)

